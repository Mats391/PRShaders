#line 2 "SkinnedMesh_dx9.dfx"

struct appdata_variable {
	vec4 Pos				: POSITION
	vec3 Normal				: NORMAL;
	scalar BlendWeights		: BLENDWEIGHT;
	vec4 BlendIndices 		: BLENDINDICES;    
	vec2 TexCoord0 			: TEXCOORD0;
    vec3 Tan 				: TANGENT;
};

#define DiffuseColor TanLightVec	// Define Alias
#define SpecularColor TanHalfVec	// Define Alias
struct VS_OUT_variable {
	vec4 HPos				: POSITION;
	vec3 GroundUVAndLerp	: TEXCOORD0;
	vec2 Tex0				: TEXCOORD1;
	vec3 TanLightVec		: TEXCOORD2;
	vec3 TanHalfVec			: TEXCOORD3;
};

struct TEMP_OUT_variable
{
	vec3 Pos				: POSITION;
	vec3 Normal				: TEXCOORD0;
	vec3 SkinnedLVec		: TEXCOORD1;
	vec3 HalfVec			: TEXCOORD2;
	vec4 wPos				: TEXCOORD3;
};


void skinSoldierForPP(uniform int NumBones, in appdata_variable indata, in vec3 lightVec, out TEMP_OUT_variable outdata)
{
	scalar LastWeight = 0.0;
	outdata.Pos = 0.0;
	outdata.Normal = 0.0;    
	outdata.SkinnedLVec = 0.0;
	if (_hasspotlight_)
		outdata.SkinnedLDir	= 0.0;
	
	// Compensate for lack of UBYTE4 on Geforce3
	int4 IndexVector = D3DCOLORtoUBYTE4(indata.BlendIndices);
	
	// Cast the vectors to arrays for use in the for loop below
	scalar BlendWeightsArray[1] = (scalar[1])indata.BlendWeights;
	int IndexArray[4] = (int[4])IndexVector;    
	
	vec3 binormal = normalize(cross(indata.Tan, indata.Normal));
	mat3x3 TanBasis = mat3x3( indata.Tan, binormal, indata.Normal);
	mat3x3 worldI;	
	mat3x3 mat;	

	// Calculate the pos/normal using the "normal" weights 
	// and accumulate the weights to calculate the last weight
	for (int iBone = 0; iBone < NumBones-1; iBone++)
	{
		LastWeight += BlendWeightsArray[iBone];
		
		vec3 sPos = mul(indata.Pos, mBoneArray[IndexArray[iBone]]);
		outdata.Pos += sPos * BlendWeightsArray[iBone];
		
		// Calculate WorldTangent directly... inverse is the transpose for affine rotations
		worldI = mul(TanBasis, mBoneArray[IndexArray[iBone]]);
		outdata.Normal += worldI[2] * BlendWeightsArray[iBone]; 
		
		mat = transpose(worldI);
		if (_haspointlight_ || _hasspotlight_)
			lightVec = lightVec - sPos;
		outdata.SkinnedLVec += mul(lightVec, mat) * BlendWeightsArray[iBone];

	}
	LastWeight = 1.0 - LastWeight; 
	
	// Now that we have the calculated weight, add in the final influence
	vec3 sPos = mul(indata.Pos, mBoneArray[IndexArray[NumBones-1]]);
	outdata.Pos += sPos * LastWeight;
	
	// Calculate WorldTangent directly... inverse is the transpose for affine rotations
	worldI = mul(TanBasis, mBoneArray[IndexArray[NumBones-1]]);
	outdata.Normal += worldI[2]  * LastWeight; 
	mat = transpose(worldI);

	if (_haspointlight_ || _hasspotlight_)
		lightVec = lightVec - sPos;
	outdata.SkinnedLVec += mul(lightVec, mat) * LastWeight;

	outdata.wPos = mul(vec4(outdata.Pos.xyz, 1.0), mWorld); 
	// Calculate HalfVector
	if (_hastangent_)
	{
		vec3 tanEyeVec = mul(worldEyePos - outdata.wPos, mat);
		outdata.HalfVec = normalize(normalize(tanEyeVec) + outdata.SkinnedLVec);
	}	
	// Normalize normals
	outdata.Normal = normalize(outdata.Normal);
}

void skinSoldierForPV(uniform int NumBones, in appdata_variable indata, TEMP_OUT_variable outdata)
{
	scalar LastWeight = 0.0;
	outdata.Pos = 0.0;
	outdata.Normal = 0.0;    

	// Compensate for lack of UBYTE4 on Geforce3
	int4 IndexVector = D3DCOLORtoUBYTE4(indata.BlendIndices);
	
	// Cast the vectors to arrays for use in the for loop below
	scalar BlendWeightsArray[1] = (scalar[1])indata.BlendWeights;
	int IndexArray[4] = (int[4])IndexVector;    
	
	// Calculate the pos/normal using the "normal" weights 
	// and accumulate the weights to calculate the last weight
	for (int iBone = 0; iBone < NumBones-1; iBone++)
	{
		LastWeight += BlendWeightsArray[iBone];
		
		outdata.Pos += mul(indata.Pos, mBoneArray[IndexArray[iBone]]) * BlendWeightsArray[iBone];
		outdata.Normal += mul(indata.Normal, mBoneArray[IndexArray[iBone]]) * BlendWeightsArray[iBone];
	}
	LastWeight = 1.0 - LastWeight; 
	
	// Now that we have the calculated weight, add in the final influence
	outdata.Pos += mul(indata.Pos, mBoneArray[IndexArray[NumBones-1]]) * LastWeight;
	outdata.Normal += mul(indata.Normal, mBoneArray[IndexArray[NumBones-1]]) * LastWeight;

	outdata.wPos = mul(vec4(outdata.Pos.xyz, 1.0), mWorld); 
	
	// Normalize normals
	outdata.Normal = normalize(Normal);
}


VS_OUT_variable vsSkinnedMesh(appdata_variable indata, uniform int NumBones)
{
	VS_OUT_variable outdata;
	TEMP_OUT_variable tempout;
	
	if (_hasperpixellight_)
	{
		skinSoldierForPP(NumBones, indata, -sunLightDir, tempout);
		if (_hastangent_)
			outdata.HalfVec = tempout.HalfVec;
		else 		
		{
			//[TS:040201] Please note that "normalize(worldEyePos-wPos") is in worldspace while "SkinnedLVec" is in SkinnedSpace/ObjectSpace can this be correct??
			outdata.HalfVec = normalize(normalize(worldEyePos-tempout.wPos) + tempout.SkinnedLVec);
		}
			
		outdata.SkinnedLVec = normalize(SkinnedLVec);
		
	}
	else
	{
		skinSoldierForPV(NumBones, indata, , tempout);
		outdata.DiffuseColor = dot(Normal, -sunLightDir) * sunColor;
		outdata.SpecularColor = dot(Normal, normalize(normalize(worldEyePos-wPos) - sunLightDir));
	}		

	// Transform position into view and then projection space
	outdata.Pos = mul(vec4(tempout.Pos.xyz, 1.0), mWorldViewProj); 

 	// Hemi lookup values
 	outdata.GroundUVAndLerp.xy = (tempout.wPos +(heightmapSize/2) + tempout.Normal).xz / heightmapSize;
	outdata.GroundUVAndLerp.y = 1-outdata.GroundUVAndLerp.y;
	outdata.GroundUVAndLerp.z = (tempout.Normal.y+1)/2;
	outdata.GroundUVAndLerp.z -= hemiLerpBias;
		
	outdata.Tex0 = indata.TexCoord0;
	
	return outdata;
}

vec4 psSkinnedMesh(VS_OUT_variable indata) : COLOR
{
	vec4 groundcolor = tex2D(sampler0, indata.GroundUVAndLerp.xy);
	vec4 hemicolor = lerp(groundcolor, skyColor, indata.GroundUVAndLerp.z);
	vec4 normal = (tex2D(sampler1, indata.Tex0) * 2) - 1;
	vec3 suncol = saturate(dot(normal.rgb, indata.SkinnedLVec)) * sunColor;
	scalar specular = pow(dot(normal.rgb, indata.HalfVec), 36);

	vec4 totalcolor = vec4(suncol, specular);	// Do something with spec-alpha later on
	totalcolor *= groundcolor.a*groundcolor.a;
	totalcolor.rgb += ambientColor*hemicolor;
	
	if (_hascolortexture_)
	{
		totalcolor.rgb *= tex2D(sampler2,indata.Tex0); //color texture
	}
	return totalcolor;
}
